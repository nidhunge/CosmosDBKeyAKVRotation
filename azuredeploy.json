{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "cosmosDbAccountName": {
      "defaultValue": "cosmos-dev",
      "type": "String"
    },
    "keyVaultName": {
      "defaultValue": "kv-dev",
      "type": "String"
    },
    "functionAppName": {
      "defaultValue": "func-dev-akvrotation",
      "type": "String",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "secretName": {
      "defaultValue": "cosmosDbKey",
      "type": "String",
      "metadata": {
        "description": "The name of the secret where storage account keys are stored."
      }
    },
    "functionStorageAccountName": {
      "defaultValue": "stazfunctions-dev",
      "type": "String",
      "metadata": {
        "description": "The name of the storage account where azure functions are stored."
      }
    },
    "repoURL": {
      "defaultValue": "https://github.com/nidhunge/CosmosDBKeyAKVRotation.git",
      "type": "String",
      "metadata": {
        "description": "The URL for the repository that contains the project to deploy."
      }
    }
  },
    "variables": {
		"eventSubscriptionName": "[concat('kv-',parameters('secretName'),'-',parameters('functionAppName'))]"		
    },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('secretName'), '/tags')]",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName'))]"
      ],
      "properties": {
        "tags": {
          "ValidityPeriodDays": "60",
          "CredentialId": "primary",
          "ProviderAddress": "[concat('/subscriptions/',[subscription().subscriptionId], '/resourceGroups/', [resourcegroup().name], '/providers/Microsoft.DocumentDb/databaseAccounts/', 'parameters(cosmosDbAccountName)')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[parameters('functionStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[parameters('functionAppName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[parameters('functionAppName')]",
        "computeMode": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[parameters('functionAppName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]"
      ],
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('functionStorageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('functionStorageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~10"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components', parameters('functionAppName')), '2018-05-01-preview').InstrumentationKey]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "sourcecontrols",
          "apiVersion": "2018-11-01",
          "name": "web",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', parameters('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('repoURL')]",
            "branch": "master",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2018-05-01-preview",
      "name": "[parameters('functionAppName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/sites', parameters('functionAppName')))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[parameters('functionAppName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2018-02-14",
      "name": "[concat(parameters('keyVaultName'), '/add')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [],
              "secrets": [
                "Get",
                "List",
                "Set"
              ],
              "certificates": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/providers/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[concat(parameters('cosmosDbAccountName'), '/Microsoft.Authorization/', guid(uniqueString(parameters('cosmosDbAccountName'))))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ],
      "properties": {
        "roleDefinitionId": "/subscriptions/[subscription().subscriptionId]/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'Full').identity.principalId]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/eventSubscriptions",
      "apiVersion": "2020-01-01-preview",
      "name": "[concat(parameters('keyVaultName'),'/Microsoft.EventGrid/',variables('eventSubscriptionName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', parameters('functionAppName'),'/sourcecontrols/web')]"
      ],
      "properties": {
        "destination": {
          "endpointType": "AzureFunction",
          "properties": {
            "maxEventsPerBatch": 1,
            "preferredBatchSizeInKilobytes": 64,
            "resourceId": "[concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'/functions/AKVStorageRotation')]"
          }
        },
        "filter": {
          "subjectBeginsWith": "[parameters('secretName')]",
          "subjectEndsWith": "[parameters('secretName')]",
          "includedEventTypes": [ "Microsoft.KeyVault.SecretNearExpiry" ]

        }
      }
    }
  ]
}
